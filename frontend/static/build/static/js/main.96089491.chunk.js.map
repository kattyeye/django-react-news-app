{"version":3,"sources":["logo.svg","custom-user/CustomUser.js","App.js","reportWebVitals.js","index.js"],"names":["CustomUser","useState","alias","avatar","profile","setProfile","preview","setPreview","className","onSubmit","event","preventDefault","formData","FormData","append","type","name","value","onChange","target","file","files","reader","FileReader","onloadend","result","readAsDataURL","src","alt","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+LAAe,I,iCCEA,SAASA,IACtB,MAA8BC,mBAAS,CACrCC,MAAO,GACPC,OAAQ,OAFV,mBAAOC,EAAP,KAAgBC,EAAhB,KAIA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAiCA,OACE,qBAAKC,UAAU,MAAf,SACE,uBAAMC,SAjBW,SAACC,GACpBA,EAAMC,iBACN,IAAMC,EAAW,IAAIC,SACrBD,EAASE,OAAO,QAASV,EAAQF,OACjCU,EAASE,OAAO,SAAUV,EAAQD,SAahC,UACE,uBACEY,KAAK,OACLC,KAAK,QACLC,MAAOb,EAAQF,MACfgB,SAtCa,SAACR,GACpB,MAAwBA,EAAMS,OAAtBH,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACdZ,EAAW,2BAAKD,GAAN,kBAAgBY,EAAOC,QAsC7B,uBAAOF,KAAK,OAAOC,KAAK,SAASE,SAnCnB,SAACR,GACnB,IAAMU,EAAOV,EAAMS,OAAOE,MAAM,GAChChB,EAAW,2BAAKD,GAAN,IAAeD,OAAQiB,KAEjC,IAAME,EAAS,IAAIC,WACnBD,EAAOE,UAAY,WACjBjB,EAAWe,EAAOG,SAEpBH,EAAOI,cAAcN,MA4BhBhB,EAAQD,QAAU,qBAAKwB,IAAKrB,EAASsB,IAAI,KAC1C,wBAAQb,KAAK,SAAb,+BC1BOc,MArBf,WACE,OACE,sBAAKrB,UAAU,MAAf,UACE,8BACE,+BACE,6BACE,wBAAQO,KAAK,SAAb,4BAEF,6BACE,wBAAQA,KAAK,SAAb,yBAEF,6BACE,wBAAQA,KAAK,SAAb,gCAIN,cAACf,EAAD,QCRS8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.96089491.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useState } from \"react\";\n\nexport default function CustomUser() {\n  const [profile, setProfile] = useState({\n    alias: \"\",\n    avatar: null,\n  });\n  const [preview, setPreview] = useState(\"\");\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setProfile({ ...profile, [name]: value });\n  };\n\n  const handleImage = (event) => {\n    const file = event.target.files[0];\n    setProfile({ ...profile, avatar: file });\n\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      setPreview(reader.result);\n    };\n    reader.readAsDataURL(file);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const formData = new FormData();\n    formData.append(\"alias\", profile.alias);\n    formData.append(\"avatar\", profile.avatar); // constructing key value pairs\n\n    const options = {\n      method: \"POST\",\n      headers: {\n        // \"X-CSRFToken\": Cookies.get(\"csrftoken\"),\n      },\n      body: formData,\n    };\n    // fetch(url, options);\n  };\n  return (\n    <div className=\"App\">\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"alias\"\n          value={profile.alias}\n          onChange={handleChange}\n        />\n        <input type=\"file\" name=\"avatar\" onChange={handleImage} />\n        {profile.avatar && <img src={preview} alt=\"\" />}\n        <button type=\"submit\">Save Profile</button>\n      </form>\n    </div>\n  );\n}\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport CustomUser from \"./custom-user/CustomUser\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <nav>\n        <ul>\n          <li>\n            <button type=\"button\">Current News</button>\n          </li>\n          <li>\n            <button type=\"button\">Some News</button>\n          </li>\n          <li>\n            <button type=\"button\">Global News</button>\n          </li>\n        </ul>\n      </nav>\n      <CustomUser />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}